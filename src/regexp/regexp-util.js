import { Utils } from "../common/utils";

export class RegExpUtil extends Utils {

  constructor() {
    super();
    //特殊字符
    this.specialChar = {
      reg: '[\`\~\!\@\#\$\%\^\&\*\(\)\=\+\;\:\'\"\\\|\,<\.\>\/\?\[\]\{\}]',
      msg: '不可包含以下字符：` ~ ! @ # $ % ^ & * ( ) = + ; : \' " |, < > . / ? [ ]{ }',
    };
    //字母，数字、下划线
    this.normalChar = {
      reg: '^[_A-Za-z0-9]$',
      msg: '只能包含字母、数字和下划线'
    };
    //整数
    this.integer = {
      reg: '^\\d+$',
      msg: '只能包含字母、数字和下划线'
    };
    //n位小数的正数
    this.decimals = (n) => ({
      reg: `^\\d+(.\\d{1,${n}})?$`,
      msg: `只可输入最多${n}位小数的正数`
    })
    //大于0的数字
    this.decimalsNotZero = (m, n) => ({
      reg: `^[1-9]\\d{0,${m - 1}}(\.\\d{1,${n}})?$|^0\.\\d{0,${n - 1}}[1-9]$`,
      msg: `只可输入最多${m}位整数且最多${n}位小数的正数`
    })
    //1-28号
    this.month28 = {
      reg: '^(?:[1-9]|(1[0-9])?|2[0-8])$',
      msg: '只可输入1-28的数字'
    };
    //汉字
    this.cn = {
      reg: '[\u4e00-\u9fa5]+',
      msg: '只可输入1-28的数字'
    };
    //邮箱
    this.email = {
      reg: '\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*',
      msg: '邮箱格式不正确'
    };
    //身份证
    this.idcard = {
      reg: '^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$',
      msg: '身份证格式不正确'
    };
    //手机号
    this.phone = {
      reg: '^((\+?86)|(\(\+86\)))?1\d{10}$',
      msg: '手机格式不正确'
    }
    //手机号和固话
    this.phoneAndTel = {
      reg: '^(0|86|17951)?(13[0-9]|15[012356789]|17[678]|18[0-9]|14[57])[0-9]{8}$',
      msg: '电话格式不正确'
    }
    //url
    this.url = {
      reg: '^(ht|f)tp(s?)://[0-9a-zA-Z]([-.w]*[0-9a-zA-Z])*(:(0-9)*)' + "*(/?)([a-zA-Z0-9-.?,'/\\+&amp;%$#_]*)?",
      msg: 'url格式不正确'
    };
    //ipv4
    this.ipv4 = {
      reg: '^((?:(?:25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d)))\.){3}(?:25[0-5]|2[0-4]\d|((1\d{2})|([1-9]?\d))))$',
      msg: 'ip格式不正确'
    }
    //端口号
    this.port = {
      reg: '^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([1-9]' +
        '[0-9]{3})|([1-9][0-9]{2})|([1-9][0-9]{1})|([0-9]))?$',
      msg: '端口号为0-65535之间的整数'
    }
    //ipv6
    this.ipv6 = {
      reg: '^s*((([0-9A-Fa-f]{1,4}[:-]){7}(([0-9A-Fa-f]{1,4})|[:-]))|(([0-9A-Fa-f]{1,4}[:-]){6}([:-]' +
        '|((25[0-5]|2[0-4]d|[01]?d{1,2})(.(25[0-5]|2[0-4]d|[01]?d{1,2})){3})|([:-][0-9A-Fa-f]{1,4})))|' +
        '(([0-9A-Fa-f]{1,4}[:-]){5}(([:-]((25[0-5]|2[0-4]d|[01]?d{1,2})(.(25[0-5]|2[0-4]d|[01]?d{1,2}))' +
        '{3})?)|(([:-][0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}[:-]){4}([:-][0-9A-Fa-f]{1,4}){0,1}(([:-]' +
        '((25[0-5]|2[0-4]d|[01]?d{1,2})(.(25[0-5]|2[0-4]d|[01]?d{1,2})){3})?)|(([:-][0-9A-Fa-f]{1,4})' +
        '{1,2})))|(([0-9A-Fa-f]{1,4}[:-]){3}([:-][0-9A-Fa-f]{1,4}){0,2}(([:-]((25[0-5]|2[0-4]d|[01]?d{1,2})' +
        '(.(25[0-5]|2[0-4]d|[01]?d{1,2})){3})?)|(([:-][0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}[:-]){2}' +
        '([:-][0-9A-Fa-f]{1,4}){0,3}(([:-]((25[0-5]|2[0-4]d|[01]?d{1,2})(.(25[0-5]|2[0-4]d|[01]?d{1,2}))' +
        '{3})?)|(([:-][0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}[:-])([:-][0-9A-Fa-f]{1,4}){0,4}(([:-]' +
        '((25[0-5]|2[0-4]d|[01]?d{1,2})(.(25[0-5]|2[0-4]d|[01]?d{1,2})){3})?)|(([:-][0-9A-Fa-f]{1,4})' +
        '{1,2})))|([:-]([:-][0-9A-Fa-f]{1,4}){0,5}(([:-]((25[0-5]|2[0-4]d|[01]?d{1,2})(.(25[0-5]|2[0-4]d|' +
        '[01]?d{1,2})){3})?)|(([:-][0-9A-Fa-f]{1,4}){1,2})))|(((25[0-5]|2[0-4]d|[01]?d{1,2})(.(25[0-5]' +
        '|2[0-4]d|[01]?d{1,2})){3})))(%.+)?s*$',
      msg: 'ip格式不正确'
    }
    //mac
    this.mac = {
      reg: '^([A-Fa-f0-9]{2}[:-]){5}[A-Fa-f0-9]{2}$',
      msg: 'mac格式不正确'
    }



    this.msg = {
      specialChar: '不可包含以下字符：` ~ ! @ # $ % ^ & * ( ) = + ; : \' " |, < > . / ? [ ]{ }',
      normalChar: '只能包含字母、数字和下划线',
      required: '必填项',
      ip: 'IP格式不正确',
      ipPort: '格式不正确',
      port: '端口号为0-65535之间的整数',
      ipv6: 'IPV6格式不正确',
      email: '邮箱格式不正确',
      phone: '电话格式不正确',
      ipRanges: 'IP网段不正确',
      cidr: ' CIDR IP地址不正确',
      mac: 'MAC地址不正确',
      number: '请输入数字',
      maxValue: '请输入不大于{0}的数值',
      minValue: '请输入不小于{0}的数值',
      valueRange: '请输入{0}到{1}之间的数值',
      int: '只可输入整数',
      maxLength: '不可超过{0}个字符',
      minLength: '不可少于{0}个字符',
      lengthRange: '{0}到{1}个字符',
      url: 'url格式不正确',
      equalTo: '两次输入密码不一致',
      remote: '数据已存在'
    };

    this.placeholder = {
      ip: '如:192.168.3.10',
      ipPort: '如:192.168.3.10:8080',
      ipRanges: '如:192.168.3.10-192.168.3.50',
      mac: '如:00-E0-4C-32-56-76',
      port: '0-65535之间的整数',
      maxValue: '输入不大于{0}的数值',
      minValue: '输入不小于{0}的数值',
      valueRange: '输入{0}到{1}之间的数值',
      int: '只可输入整数',
      maxLength: '不可超过{0}个字符',
      minLength: '不可少于{0}个字符',
      lengthRange: '{0}到{1}个字符',
      url: '如:http://www.neiwang.cn'
    };
  }

  isSpecialChar(v) {
    return new RegExp(this.specialChar.reg).test(v);
  }
  isNormalChar(v) {
    return new RegExp(this.normalChar.reg).test(v);
  }
  isDecimals(v,n){
    return new RegExp(this.decimals(n).reg).test(v);
  }
  isDecimalsNotZero(v,m,n){
    return new RegExp(this.decimalsNotZero(m,n).reg).test(v);
  }
  //字符长度
  bytelength(v,min,max){
    let cnStrLength = v.match(new RegExp(this.cn,gm)).length;
    let length = v.length + cnStrLength;
    return min<=length && length<=max
  }



}

